/*
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
*/

import java.util.Stack;

class Solution {
/*
We first create a stack of characters and iterate over each character in the string using a for-each loop. If the character is an opening bracket, 
we push it onto the stack. If the character is a closing bracket, we check if the stack is empty. If it is, the string is invalid because
there is no opening bracket to match the closing bracket. Otherwise, we pop the top element from the stack and check if it matches the closing bracket. 
If it doesn't match, the string is invalid.

At the end of the loop, we check if the stack is empty. If it is, the string is valid because all opening brackets have been matched with closing brackets.
If it is not, the string is invalid because there are unmatched opening brackets.
*/
   public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(char c : s.toCharArray()){
            if(c == '(' || c == '[' || c == '{'){
                stack.push(c);
            } else if(c == ')' || c == ']' || c == '}'){
                if(stack.isEmpty()){
                    return false;
                }
                char top = stack.pop();
                if ((c == ')'  && top != '(') || (c==']' && top != '[') || (c == '}') && top != '{'){
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
}

